##########
torch.Size([1, 255, 13, 13])
-----------------
Layer:0
OutBlob:tensor([[[[ 4.1402e-01,  1.9846e+00, -1.2020e+00,  ...,  8.2600e-02,
            2.5135e-01, -3.9045e+00],
          [ 1.5564e+00, -6.0681e-02, -1.0190e+00,  ..., -1.2905e+00,
            1.2274e+00, -1.0218e+00],
          [-5.5767e-01, -5.6617e-01, -2.3062e-01,  ..., -7.1635e-01,
            4.1085e-01, -8.8065e-01],
          ...,
          [-1.1575e+00,  1.4152e+00, -1.7348e+00,  ..., -4.6909e-02,
            5.0208e-01,  2.0160e-02],
          [ 2.5030e+00, -1.4619e+00, -1.9606e+00,  ..., -8.3766e-01,
            1.2041e+00, -5.1277e-01],
          [ 1.6194e+00, -1.8246e+00, -9.4166e-01,  ..., -3.5041e-01,
            9.2674e-01, -1.6444e+00]],

         [[-5.9375e-01,  1.7960e-01,  1.2798e+00,  ...,  3.7784e-01,
            1.2659e+00,  2.1823e+00],
          [ 6.3376e-01,  1.1580e+00,  3.2914e-01,  ..., -5.3966e-01,
            1.3608e+00,  2.1068e+00],
          [-4.0956e-01, -1.3842e+00,  3.8896e-01,  ...,  2.1187e+00,
           -8.9567e-01, -2.0283e+00],
          ...,
          [-1.9255e+00, -3.7372e-01,  1.1333e+00,  ..., -7.2821e-01,
            3.5798e-01, -2.4708e-01],
          [ 1.2534e+00,  2.9857e+00,  1.4846e+00,  ...,  9.9087e-01,
            1.4530e+00,  1.9644e+00],
          [-2.6883e+00, -2.9471e+00, -1.3850e+00,  ..., -1.3125e+00,
           -2.5545e+00, -6.7162e-01]],

         [[-3.9353e-01,  2.7514e-01,  2.8468e-01,  ..., -2.1712e-01,
           -6.7403e-01,  1.3627e-01],
          [-6.6177e-01, -6.5128e-02, -2.1573e-02,  ..., -2.2363e-01,
           -6.7720e-01, -7.2480e-01],
          [-3.6443e-01,  1.1846e-01, -3.0327e-02,  ...,  1.8321e-01,
           -3.1724e-01, -2.1593e-01],
          ...,
          [ 1.7727e-01,  6.5989e-02,  1.6642e-01,  ..., -4.9331e-02,
            3.6123e-01, -4.8941e-03],
          [-8.3935e-01, -1.9742e-01,  2.7691e-02,  ...,  3.6436e-01,
            3.2025e-02,  7.3755e-02],
          [-2.2577e-01, -2.7002e-01, -2.4326e-01,  ...,  3.4582e-01,
            2.0138e-01,  1.1405e+00]],

         ...,

         [[-1.2943e+01, -1.2550e+01, -1.0593e+01,  ..., -1.6578e+01,
           -1.2333e+01, -8.2611e+00],
          [-1.3686e+01, -1.4625e+01, -1.0622e+01,  ..., -1.4782e+01,
           -1.5332e+01, -1.2366e+01],
          [-1.2630e+01, -1.4616e+01, -1.0865e+01,  ..., -9.4155e+00,
           -8.2480e+00, -7.3237e+00],
          ...,
          [-9.3884e+00, -1.2552e+01, -1.2338e+01,  ..., -1.4351e+01,
           -7.8427e+00, -5.9417e+00],
          [-1.1652e+01, -1.3279e+01, -1.0550e+01,  ..., -1.3504e+01,
           -8.0363e+00, -5.5161e+00],
          [-9.6777e+00, -1.0918e+01, -9.5641e+00,  ..., -9.5947e+00,
           -7.0384e+00, -7.2249e+00]],

         [[-1.2050e+01, -1.2177e+01, -9.6313e+00,  ..., -1.6436e+01,
           -1.3233e+01, -9.7147e+00],
          [-1.2778e+01, -1.3167e+01, -1.1470e+01,  ..., -1.2501e+01,
           -1.3589e+01, -1.1223e+01],
          [-1.2805e+01, -1.2068e+01, -1.2023e+01,  ..., -1.0122e+01,
           -1.0063e+01, -8.4463e+00],
          ...,
          [-1.1098e+01, -1.1820e+01, -1.1334e+01,  ..., -1.1380e+01,
           -9.1611e+00, -7.0865e+00],
          [-1.0992e+01, -1.2637e+01, -1.0302e+01,  ..., -9.6082e+00,
           -9.5192e+00, -8.2050e+00],
          [-9.7404e+00, -1.1343e+01, -8.5981e+00,  ..., -7.7849e+00,
           -8.8035e+00, -7.1078e+00]],

         [[-1.2689e+01, -1.4109e+01, -9.4561e+00,  ..., -1.7613e+01,
           -1.2723e+01, -9.1909e+00],
          [-1.4076e+01, -1.4948e+01, -1.2297e+01,  ..., -1.2398e+01,
           -1.4329e+01, -1.3489e+01],
          [-1.4265e+01, -1.4030e+01, -1.3532e+01,  ..., -1.0401e+01,
           -9.5543e+00, -9.1942e+00],
          ...,
          [-1.1003e+01, -1.1730e+01, -1.1844e+01,  ..., -1.2773e+01,
           -1.0568e+01, -6.9914e+00],
          [-1.0289e+01, -1.2301e+01, -9.8473e+00,  ..., -1.1828e+01,
           -1.0476e+01, -8.8622e+00],
          [-9.5894e+00, -1.1491e+01, -8.3293e+00,  ..., -7.8375e+00,
           -9.2680e+00, -7.2660e+00]]]],
       device='cuda:0', grad_fn=<CudnnConvolutionBackward>)
##########
torch.Size([1, 255, 26, 26])
-----------------
Layer:1
OutBlob:tensor([[[[ 1.6381e+00, -6.6772e-01,  1.8434e-01,  ...,  3.9022e+00,
           -5.1138e+00,  1.5925e-01],
          [ 2.4937e+00, -7.2530e-01, -3.9546e-01,  ...,  6.6403e-01,
            2.4798e+00, -3.2206e+00],
          [ 2.3939e+00, -2.1477e-01, -6.0439e-01,  ...,  2.7734e+00,
            5.4825e-01, -1.4440e+00],
          ...,
          [ 9.3081e-01, -8.2262e-01, -9.5152e-01,  ...,  4.1131e-02,
            2.0594e+00, -1.2431e+00],
          [ 2.4670e+00, -3.4605e+00, -1.5247e-01,  ...,  1.0681e-01,
            2.5969e+00, -3.9496e+00],
          [ 3.4475e-01, -1.9237e+00,  2.1883e-01,  ..., -5.4267e-01,
            3.6662e+00, -4.9742e+00]],

         [[ 2.5671e+00,  3.4556e+00,  2.6017e+00,  ...,  8.1303e-01,
            3.7420e+00,  3.4148e-01],
          [-6.5999e-01, -3.2459e-01, -9.0004e-01,  ..., -6.1398e-01,
            9.7649e-01,  1.1402e+00],
          [ 9.8880e-01, -4.6374e-01, -3.2451e-01,  ...,  6.3193e-01,
           -1.0173e+00, -9.2529e-02],
          ...,
          [ 1.5377e-01,  2.3290e+00, -8.5479e-02,  ...,  3.7253e-01,
            9.0583e-01,  4.8144e-01],
          [-1.6502e+00,  1.1164e-01, -1.7240e+00,  ..., -8.2920e-01,
           -2.5091e-01,  1.0397e+00],
          [-2.5841e+00, -2.9914e+00, -1.3867e+00,  ...,  4.1715e-02,
           -2.6630e+00, -1.4539e+00]],

         [[-6.4222e-02, -7.2096e-03,  3.4389e-01,  ...,  5.2488e-01,
            2.1780e-02, -1.5799e+00],
          [ 1.6621e-01, -8.6409e-02,  1.8973e-02,  ...,  2.7533e-01,
            1.4412e-01, -5.5922e-01],
          [-5.7910e-01, -8.0737e-04, -2.6046e-01,  ..., -2.3816e-01,
            2.7724e-01, -6.2128e-01],
          ...,
          [-5.6710e-01,  9.2294e-02, -2.6981e-01,  ..., -4.1686e-01,
           -6.4935e-02, -1.1795e+00],
          [-3.4675e-01,  3.7941e-01, -5.5876e-01,  ...,  6.0092e-02,
           -9.2232e-02, -4.5782e-01],
          [-5.3582e-01,  3.6321e-01, -8.3395e-01,  ..., -4.6116e-01,
            8.7981e-02, -1.8867e-01]],

         ...,

         [[-2.5270e+01, -1.9489e+01, -1.4953e+01,  ..., -1.4322e+01,
           -1.2772e+01, -1.9120e+01],
          [-2.5667e+01, -1.8784e+01, -1.7481e+01,  ..., -1.5424e+01,
           -1.0115e+01, -1.4936e+01],
          [-1.6181e+01, -1.7003e+01, -2.0436e+01,  ..., -1.7597e+01,
           -1.7176e+01, -1.4001e+01],
          ...,
          [-1.8457e+01, -1.4309e+01, -1.3256e+01,  ..., -1.2548e+01,
           -1.6425e+01, -1.4847e+01],
          [-1.6384e+01, -1.3541e+01, -1.2268e+01,  ..., -1.1556e+01,
           -1.1922e+01, -1.2571e+01],
          [-1.2225e+01, -1.1333e+01, -1.2658e+01,  ..., -7.0701e+00,
           -9.2542e+00, -1.2185e+01]],

         [[-1.5792e+01, -1.8048e+01, -1.2188e+01,  ..., -1.4103e+01,
           -1.2457e+01, -1.2580e+01],
          [-1.5482e+01, -1.3952e+01, -1.5363e+01,  ..., -1.6868e+01,
           -1.2916e+01, -1.2649e+01],
          [-1.1640e+01, -1.2165e+01, -1.5084e+01,  ..., -1.7700e+01,
           -1.8916e+01, -1.5227e+01],
          ...,
          [-1.5245e+01, -1.6690e+01, -1.0967e+01,  ..., -1.5869e+01,
           -1.8193e+01, -1.6906e+01],
          [-1.6900e+01, -1.6213e+01, -1.0950e+01,  ..., -1.6851e+01,
           -1.4322e+01, -1.6422e+01],
          [-1.3961e+01, -1.7071e+01, -1.1869e+01,  ..., -1.0742e+01,
           -9.3428e+00, -1.2526e+01]],

         [[-1.8664e+01, -2.0310e+01, -1.3842e+01,  ..., -1.7792e+01,
           -1.7070e+01, -1.5336e+01],
          [-1.9093e+01, -1.6300e+01, -1.5485e+01,  ..., -1.4949e+01,
           -1.0831e+01, -1.3779e+01],
          [-9.9008e+00, -1.3907e+01, -1.8741e+01,  ..., -1.6509e+01,
           -1.4430e+01, -1.2761e+01],
          ...,
          [-1.3134e+01, -1.5633e+01, -1.1758e+01,  ..., -1.5057e+01,
           -1.9104e+01, -1.5221e+01],
          [-1.4883e+01, -1.6474e+01, -1.1336e+01,  ..., -1.6971e+01,
           -1.6123e+01, -1.5486e+01],
          [-1.2835e+01, -1.7684e+01, -1.1730e+01,  ..., -9.9190e+00,
           -1.0216e+01, -1.5248e+01]]]],
       device='cuda:0', grad_fn=<CudnnConvolutionBackward>)
##########
torch.Size([1, 255, 52, 52])
-----------------
Layer:2
OutBlob:tensor([[[[-1.0750e+00,  4.9029e-01,  5.1896e-01,  ..., -2.2265e-01,
            9.0918e-01,  1.4225e+00],
          [-2.9078e+00, -4.8170e-01,  1.0889e+00,  ...,  3.0613e-01,
           -1.6168e-01,  1.2258e+00],
          [-4.3337e+00,  2.4956e-01,  1.0085e+00,  ..., -1.0385e+00,
           -2.5887e+00,  2.4816e+00],
          ...,
          [-4.1968e+00,  5.2344e-01,  4.0366e+00,  ..., -7.9722e-01,
           -2.2060e-01, -5.5898e-01],
          [-3.7321e+00, -7.8067e-01,  3.0471e+00,  ...,  2.2721e-01,
            2.7196e-01,  1.0126e+00],
          [-1.7809e+00, -1.0775e-02,  1.4688e+00,  ...,  1.0123e+00,
           -2.9722e-01,  4.8141e-01]],

         [[-1.2402e+00, -2.5362e+00, -1.5518e+00,  ..., -2.4290e+00,
           -1.3775e+00,  1.3262e-01],
          [ 1.4015e-01,  7.4984e-01,  7.3183e-01,  ..., -1.6874e+00,
            1.4641e-01,  8.3599e-01],
          [ 7.7805e-01,  1.2754e+00,  1.2396e+00,  ...,  3.8848e+00,
            1.7950e+00,  3.6301e-01],
          ...,
          [ 5.6904e-01,  8.6814e-01,  6.2151e-01,  ..., -1.8190e+00,
           -2.9604e+00, -9.4198e-01],
          [ 4.1571e-01,  1.2079e+00,  1.9913e-02,  ..., -8.4674e-01,
           -6.2955e-01, -2.2559e+00],
          [ 1.0449e+00,  2.2364e+00,  2.1293e+00,  ...,  7.3485e-01,
            1.6515e-01,  2.7434e-01]],

         [[-8.8936e-01,  4.8044e-02,  4.3418e-01,  ...,  4.3305e-01,
           -8.2851e-01, -1.2282e+00],
          [-1.1898e+00, -8.9372e-02, -4.2998e-01,  ..., -5.3285e-01,
           -2.6844e+00, -2.0125e+00],
          [-1.7327e+00, -2.0030e-01, -6.8162e-01,  ..., -1.3484e+00,
           -3.5095e+00, -2.8082e+00],
          ...,
          [-1.8814e+00, -1.3288e+00, -1.9703e+00,  ..., -1.4013e+00,
           -3.9477e+00, -3.0650e+00],
          [-1.6267e+00, -7.8540e-01, -9.0716e-01,  ..., -8.4780e-01,
           -1.0229e+00, -2.5254e+00],
          [-7.1881e-01,  5.3735e-01,  8.1115e-01,  ...,  1.5006e+00,
            6.0649e-01, -1.1317e+00]],

         ...,

         [[-8.5860e+00, -9.2022e+00, -9.8933e+00,  ..., -1.4673e+01,
           -1.1406e+01, -7.9808e+00],
          [-1.0620e+01, -1.1219e+01, -1.3870e+01,  ..., -3.1067e+01,
           -2.3272e+01, -1.3115e+01],
          [-8.7402e+00, -1.0182e+01, -1.4948e+01,  ..., -5.7768e+01,
           -4.4115e+01, -2.1836e+01],
          ...,
          [-4.1624e+00, -7.1036e+00, -1.4805e+01,  ..., -3.7360e+01,
           -2.9651e+01, -1.4587e+01],
          [-6.7470e+00, -6.7281e+00, -1.3775e+01,  ..., -4.2574e+01,
           -3.6614e+01, -1.9239e+01],
          [-7.1616e+00, -7.8075e+00, -9.2713e+00,  ..., -2.2928e+01,
           -2.3145e+01, -1.6257e+01]],

         [[-7.3759e+00, -8.9565e+00, -1.0183e+01,  ..., -1.0788e+01,
           -7.6399e+00, -5.4742e+00],
          [-8.3075e+00, -9.8856e+00, -1.2812e+01,  ..., -2.1445e+01,
           -1.4234e+01, -8.9204e+00],
          [-7.3804e+00, -1.0641e+01, -1.6735e+01,  ..., -4.4353e+01,
           -2.9838e+01, -1.5530e+01],
          ...,
          [-6.3984e+00, -1.6063e+01, -2.8648e+01,  ..., -3.9114e+01,
           -3.0521e+01, -1.4964e+01],
          [-5.9707e+00, -9.9090e+00, -2.0370e+01,  ..., -4.0121e+01,
           -3.3658e+01, -1.7087e+01],
          [-6.0533e+00, -6.5422e+00, -1.1421e+01,  ..., -2.0861e+01,
           -1.9709e+01, -1.3814e+01]],

         [[-6.1390e+00, -8.7181e+00, -1.0617e+01,  ..., -9.3693e+00,
           -4.9376e+00, -3.4257e+00],
          [-6.6997e+00, -1.0582e+01, -1.5683e+01,  ..., -2.3469e+01,
           -1.3263e+01, -7.7873e+00],
          [-5.6637e+00, -9.9381e+00, -2.0329e+01,  ..., -5.0135e+01,
           -3.0684e+01, -1.4988e+01],
          ...,
          [-6.7406e+00, -1.5941e+01, -3.5406e+01,  ..., -4.1024e+01,
           -3.2350e+01, -1.5333e+01],
          [-6.0167e+00, -7.6348e+00, -2.4747e+01,  ..., -4.3734e+01,
           -3.5049e+01, -1.7325e+01],
          [-5.4626e+00, -3.2823e+00, -1.0314e+01,  ..., -2.3714e+01,
           -2.0670e+01, -1.3612e+01]]]],
       device='cuda:0', grad_fn=<CudnnConvolutionBackward>)


def unique(tensor):
    tensor_np = tensor.cpu().numpy()
    unique_np = np.unique(tensor_np)
    unique_tensor = torch.from_numpy(unique_np)
    
    tensor_res = tensor.new(unique_tensor.shape)
    tensor_res.copy_(unique_tensor)
    return tensor_res

def bbox_iou(box1, box2):
    """
    Returns the IoU of two bounding boxes 
    
    
    """
    #Get the coordinates of bounding boxes
    b1_x1, b1_y1, b1_x2, b1_y2 = box1[:,0], box1[:,1], box1[:,2], box1[:,3]
    b2_x1, b2_y1, b2_x2, b2_y2 = box2[:,0], box2[:,1], box2[:,2], box2[:,3]
    
    #get the corrdinates of the intersection rectangle
    inter_rect_x1 =  torch.max(b1_x1, b2_x1)
    inter_rect_y1 =  torch.max(b1_y1, b2_y1)
    inter_rect_x2 =  torch.min(b1_x2, b2_x2)
    inter_rect_y2 =  torch.min(b1_y2, b2_y2)
    
    #Intersection area
    inter_area = torch.clamp(inter_rect_x2 - inter_rect_x1 + 1, min=0) * torch.clamp(inter_rect_y2 - inter_rect_y1 + 1, min=0)
 
    #Union Area
    b1_area = (b1_x2 - b1_x1 + 1)*(b1_y2 - b1_y1 + 1)
    b2_area = (b2_x2 - b2_x1 + 1)*(b2_y2 - b2_y1 + 1)
    
    iou = inter_area / (b1_area + b2_area - inter_area)
    
    return iou

def write_results(prediction, confidence, num_classes, nms_conf = 0.4):
    conf_mask = (prediction[:,:,4] > confidence).float().unsqueeze(2)
    prediction = prediction*conf_mask

    box_corner = prediction.new(prediction.shape)
    box_corner[:,:,0] = (prediction[:,:,0] - prediction[:,:,2]/2)
    box_corner[:,:,1] = (prediction[:,:,1] - prediction[:,:,3]/2)
    box_corner[:,:,2] = (prediction[:,:,0] + prediction[:,:,2]/2) 
    box_corner[:,:,3] = (prediction[:,:,1] + prediction[:,:,3]/2)
    prediction[:,:,:4] = box_corner[:,:,:4]

    batch_size = prediction.size(0)

    write = False

    for ind in range(batch_size):
        image_pred = prediction[ind]          #image Tensor
        #confidence threshholding 
        max_conf, max_conf_score = torch.max(image_pred[:,5:5+ num_classes], 1)
        max_conf = max_conf.float().unsqueeze(1)
        max_conf_score = max_conf_score.float().unsqueeze(1)
        seq = (image_pred[:,:5], max_conf, max_conf_score)
        image_pred = torch.cat(seq, 1)

        non_zero_ind =  (torch.nonzero(image_pred[:,4]))
        try:
            image_pred_ = image_pred[non_zero_ind.squeeze(),:].view(-1,7)
        except:
            continue
            
            #For PyTorch 0.4 compatibility
            #Since the above code with not raise exception for no detection 
            #as scalars are supported in PyTorch 0.4
        if image_pred_.shape[0] == 0:
            continue 
        #Get the various classes detected in the image
        img_classes = unique(image_pred_[:,-1]) # -1 index holds the class index
        for cls in img_classes:
                #perform NMS
            #get the detections with one particular class
            cls_mask = image_pred_*(image_pred_[:,-1] == cls).float().unsqueeze(1)
            class_mask_ind = torch.nonzero(cls_mask[:,-2]).squeeze()
            image_pred_class = image_pred_[class_mask_ind].view(-1,7)

    #sort the detections such that the entry with the maximum objectness
    #confidence is at the top
            conf_sort_index = torch.sort(image_pred_class[:,4], descending = True )[1]
            image_pred_class = image_pred_class[conf_sort_index]
            idx = image_pred_class.size(0)   #Number of detections  
            for i in range(idx):
        #Get the IOUs of all boxes that come after the one we are looking at 
        #in the loop
                try:
                    ious = bbox_iou(image_pred_class[i].unsqueeze(0), image_pred_class[i+1:])
                except ValueError:
                    break

                except IndexError:
                    break

        #Zero out all the detections that have IoU > treshhold
                iou_mask = (ious < nms_conf).float().unsqueeze(1)
                image_pred_class[i+1:] *= iou_mask       

        #Remove the non-zero entries
                non_zero_ind = torch.nonzero(image_pred_class[:,4]).squeeze()
                image_pred_class = image_pred_class[non_zero_ind].view(-1,7)
                ious = bbox_iou(image_pred_class[i].unsqueeze(0), image_pred_class[i+1:])
            #Zero out all the detections that have IoU > treshhold
                iou_mask = (ious < nms_conf).float().unsqueeze(1)
                image_pred_class[i+1:] *= iou_mask       

    #Remove the non-zero entries
                non_zero_ind = torch.nonzero(image_pred_class[:,4]).squeeze()
                image_pred_class = image_pred_class[non_zero_ind]  

        batch_ind = image_pred_class.new(image_pred_class.size(0), 1).fill_(ind)      
                #Repeat the batch_id for as many detections of the class cls in the image
        seq = batch_ind, image_pred_class

        if not write:
            output = torch.cat(seq,1)
            write = True
        else:
            out = torch.cat(seq,1)
            output = torch.cat((output,out))
        try:
            return output
        except:
            return 0